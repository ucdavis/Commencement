@using Commencement.Core.Helpers
@model Commencement.Controllers.ViewModels.ExtraTicketPetitionModel

@{
    ViewBag.Title = "ExtraTicketPetitionNew";
    Layout = "~/Views/Shared/_StudentLayout.cshtml";

    var registrations = Model.Registration.RegistrationParticipations.Where(x => !x.Cancelled).ToList();
    var counter = 0;
}

<div class="pull-right">
    @Html.Partial("_LogonPartial")
</div>

<div class="banner banner--register">
    <div class="banner_contents">
        <img src="@Url.Content("~/Images/Media/commencement_welcome.svg")" alt="">
    </div>
</div>

<div class="studentbar">
    <div class="studentbar__contents">
        <div class="studentbar--item">
            <p><b>Name:</b> @Model.Registration.Student.FullName</p>
        </div>
        <div class="studentbar--item">
            <p><b>Email:</b> @Model.Registration.Student.Email</p>
        </div>
        <div class="studentbar--item">
            <p><b>Student ID:</b> @Model.Registration.Student.StudentId</p>
        </div>
        <div class="studentbar--item">
            <p><b>Units:</b> @Model.Registration.Student.TotalUnits</p>
        </div>
        <div class="studentbar--item">
            <p><b>Major(s):</b> @Model.Registration.Student.ActualStrMajors</p>
        </div>
    </div>
</div>

@using (Html.BeginForm("ExtraTicketPetition", "Petition", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="main">
        <div class="main_contents">
            <div class="register">
                <div class="register__section">
                    @Html.ValidationSummary("Please correct all errors below")
                    @for (int j = 0; j < registrations.Count; j++)
                    {
                        var participation = registrations[j];

                        <div class="ceremony">
                            <h2>@participation.Ceremony.CeremonyName</h2>
                            @if (!Model.AvailableParticipationIds.Contains(participation.Id))
                            {
                                var theAlertMessage = string.Empty;
                                if (participation.ExtraTicketPetition != null)
                                {
                                    theAlertMessage = "This ceremony is not available for extra ticket petition because you have previously submitted a petition.";
                                }
                                else if (DateTime.UtcNow.ToPacificTime() < participation.Ceremony.ExtraTicketBegin) //TODO: Fix Date for UTC
                                {
                                    theAlertMessage = string.Format("This ceremony is not available for extra ticket petition.  Please return on {0:d} to submit a petition.", participation.Ceremony.ExtraTicketBegin);
                                }
                                else if (DateTime.UtcNow.ToPacificTime() > participation.Ceremony.ExtraTicketDeadline.AddDays(1)) //TODO: Fix date for UTC
                                {
                                    theAlertMessage = string.Format("This ceremony is not available for extra ticket petitions.  The deadline was on {0:d} ", participation.Ceremony.ExtraTicketDeadline);
                                }
                                <div class="alert alert-danger">
                                    <span>@theAlertMessage</span>
                                </div>
                            }

                            <table cellspacing="10">
                                <tbody>
                                <tr>
                                    <td><b>Major:</b></td>
                                    <td>@Html.DisplayFor(x => participation.Major.Name)</td>
                                </tr>
                                <tr>
                                    <td><b>Ceremony Time:</b></td>
                                    <td>@Html.DisplayFor(x => participation.Ceremony.DateTime)</td>
                                </tr>
                                <tr>
                                    <td><b>Delivery Method:</b></td>
                                    <td>@Html.DisplayFor(x => participation.TicketDistributionMethod.Name)</td>
                                </tr>
                                <tr>
                                    <td><b># Tickets Requested:</b></td>
                                    <td>@Html.DisplayFor(x => participation.NumberTickets)</td>
                                </tr>
                                @if (Model.AvailableParticipationIds.Contains(participation.Id))
                                {
                                    var postModel = Model.ExtraTicketPetitionPostModels.Where(a => a.RegistrationParticipation == participation).FirstOrDefault();                                    

                                    @Html.Hidden(string.Format("extraTicketPetitions[{0}].Ceremony", counter), participation.Ceremony.Id)
                                    @Html.Hidden(string.Format("extraTicketPetitions[{0}].RegistrationParticipation", counter), participation.Id)

                                    <tr>
                                        <td><b>Extra Tickets:</b></td>
                                        <td>
                                            <select id="@string.Format("extraTicketPetitions[{0}]_NumberTickets", counter)" name="@string.Format("extraTicketPetitions[{0}].NumberTickets", counter)" class="long">

                                                <option value="">--Select # of Tickets--</option>

                                                @for (int i = 1; i <= participation.Ceremony.ExtraTicketPerStudent; i++)
                                                {
                                                    <option value="@i" @(postModel != null && i == postModel.NumberTickets ? "selected=\"selected\"" : string.Empty)>@string.Format("{0:00}", i)</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                    if (participation.Ceremony.HasStreamingTickets)
                                    {
                                        <tr>
                                            <td><b>Streaming Tickets:</b></td>
                                            <td>
                                                <select id="@string.Format("extraTicketPetitions[{0}]_NumberStreamingTickets", counter)" name="@string.Format("extraTicketPetitions[{0}].NumberStreamingTickets", counter)" class="long">

                                                    <option value="">--Select # of Tickets--</option>

                                                    @for (int i = 1; i <= participation.Ceremony.ExtraTicketPerStudent; i++)
                                                    {
                                                        <option value="@i" @(postModel != null && i == postModel.NumberStreamingTickets ? "selected=\"selected\"" : string.Empty)>@string.Format("{0:00}", i)</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @Html.Hidden(string.Format("extraTicketPetitions[{0}]_NumberStreamingTickets", counter), 0)
                                    }

                                }


                                </tbody>
                            </table>
                            @if (Model.AvailableParticipationIds.Contains(participation.Id))
                            {
                                <div class="input__group">
                                    <label class="pull-left">Reason</label>
                                    <textarea style="width: 100%" type="text" id="@string.Format("extraTicketPetitions[{0}].Reason", counter)" name="@string.Format("extraTicketPetitions[{0}].Reason", counter)" rows="4" class="petition-reason">@(participation.ExtraTicketPetition != null ? participation.ExtraTicketPetition.Reason : string.Empty)</textarea>
                                    @Html.ValidationMessage("Reason" + participation.Ceremony.Id)
                                </div>
                                counter++;
                            }
                        </div>

                    }
                    <button type="submit" class="btn btn-18 btn-green"><i class="fa fa-graduation-cap" aria-hidden="true"></i> Submit </button>
                    <a href="@Url.Action("DisplayRegistration", "Student")" class="btn btn-18 btn-blue">Cancel</a>
                </div>


            </div>

        </div>

    </div>


}


@section AdditionalScripts
{
    @Scripts.Render("~/bundles/easycounter")
    @Scripts.Render("~/bundles/jqueryval")   
    <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/mvc/4.0/jquery.validate.unobtrusive.min.js"></script>

    @*TODO: Fix jquery multiple loads. page validate isn't working would these*@
    <script>
        $(function () {
            $("textarea.petition-reason")
                .jqEasyCounter({
                    'maxChars': 100,
                    'maxCharsWarning': 80,
                    'msgAppendMethod': 'insertBefore',
                    'msgTextAlign': 'right'
                });
        });
    </script>
    


}

