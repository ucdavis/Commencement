/*
Deployment script for Commencement.Db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Commencement.Db"
:setvar DefaultFilePrefix "Commencement.Db"
:setvar DefaultDataPath "C:\Users\lai\Documents\Visual Studio 2010\Projects\Commencement\Commencement.Db\Sandbox\"
:setvar DefaultLogPath "C:\Users\lai\Documents\Visual Studio 2010\Projects\Commencement\Commencement.Db\Sandbox\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[AuditActionTypes]...';


GO
CREATE TABLE [dbo].[AuditActionTypes] (
    [ID]             CHAR (1)     NOT NULL,
    [ActionCodeName] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_ActionCodes] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Audits]...';


GO
CREATE TABLE [dbo].[Audits] (
    [ID]                UNIQUEIDENTIFIER NOT NULL,
    [ObjectName]        VARCHAR (50)     NOT NULL,
    [ObjectId]          VARCHAR (50)     NULL,
    [AuditActionTypeId] CHAR (1)         NOT NULL,
    [Username]          NVARCHAR (256)   NOT NULL,
    [AuditDate]         DATETIME         NOT NULL,
    CONSTRAINT [PK_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Ceremonies]...';


GO
CREATE TABLE [dbo].[Ceremonies] (
    [id]                    INT           IDENTITY (1, 1) NOT NULL,
    [Name]                  VARCHAR (100) NULL,
    [Location]              VARCHAR (200) NOT NULL,
    [DateTime]              DATETIME      NOT NULL,
    [TicketsPerStudent]     INT           NOT NULL,
    [TotalTickets]          INT           NOT NULL,
    [TotalStreamingTickets] INT           NULL,
    [PrintingDeadline]      DATE          NOT NULL,
    [RegistrationDeadline]  DATE          NOT NULL,
    [TermCode]              VARCHAR (6)   NOT NULL,
    [ExtraTicketDeadline]   DATE          NOT NULL,
    [ExtraTicketPerStudent] INT           NOT NULL,
    [MinUnits]              INT           NOT NULL,
    [PetitionThreshold]     INT           NOT NULL,
    [RegistrationBegin]     DATE          NOT NULL,
    [ExtraTicketBegin]      DATE          NOT NULL,
    [HasStreamingTickets]   BIT           NOT NULL,
    [ConfirmationText]      VARCHAR (MAX) NULL,
    [PickupTickets]         BIT           NOT NULL,
    [MailTickets]           BIT           NOT NULL,
    [WebsiteUrl]            VARCHAR (MAX) NULL,
    [SurveyUrl]             VARCHAR (MAX) NULL,
    CONSTRAINT [PK_Commencements] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[CeremonyColleges]...';


GO
CREATE TABLE [dbo].[CeremonyColleges] (
    [CeremonyId]  INT      NOT NULL,
    [CollegeCode] CHAR (2) NOT NULL,
    CONSTRAINT [PK_CeremonyColleges] PRIMARY KEY CLUSTERED ([CeremonyId] ASC, [CollegeCode] ASC)
);


GO
PRINT N'Creating [dbo].[CeremonyEditors]...';


GO
CREATE TABLE [dbo].[CeremonyEditors] (
    [id]         INT IDENTITY (1, 1) NOT NULL,
    [CeremonyId] INT NOT NULL,
    [UserId]     INT NOT NULL,
    [Owner]      BIT NOT NULL,
    CONSTRAINT [PK_CommencementEditors] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[CeremonyMajors]...';


GO
CREATE TABLE [dbo].[CeremonyMajors] (
    [CeremonyId] INT         NOT NULL,
    [MajorCode]  VARCHAR (4) NOT NULL,
    CONSTRAINT [PK_CommencementMajors] PRIMARY KEY CLUSTERED ([CeremonyId] ASC, [MajorCode] ASC)
);


GO
PRINT N'Creating [dbo].[CeremonyXTicketDistributionMethods]...';


GO
CREATE TABLE [dbo].[CeremonyXTicketDistributionMethods] (
    [CeremonyId]                 INT         NOT NULL,
    [TicketDistributionMethodId] VARCHAR (2) NOT NULL,
    CONSTRAINT [PK_CeremonyXTicketDistributionMethods] PRIMARY KEY CLUSTERED ([CeremonyId] ASC, [TicketDistributionMethodId] ASC)
);


GO
PRINT N'Creating [dbo].[Colleges]...';


GO
CREATE TABLE [dbo].[Colleges] (
    [id]      CHAR (2)     NOT NULL,
    [Name]    VARCHAR (50) NOT NULL,
    [Display] BIT          NOT NULL,
    CONSTRAINT [PK_Colleges] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[EmailQueue]...';


GO
CREATE TABLE [dbo].[EmailQueue] (
    [id]                          INT              IDENTITY (1, 1) NOT NULL,
    [Student_Id]                  UNIQUEIDENTIFIER NOT NULL,
    [Created]                     DATETIME         NOT NULL,
    [Pending]                     BIT              NOT NULL,
    [SentDateTime]                DATETIME         NULL,
    [TemplateId]                  INT              NULL,
    [Subject]                     VARCHAR (100)    NOT NULL,
    [Body]                        VARCHAR (MAX)    NOT NULL,
    [Immediate]                   BIT              NOT NULL,
    [RegistrationId]              INT              NULL,
    [RegistrationParticipationId] INT              NULL,
    [RegistrationPetitionId]      INT              NULL,
    [ExtraTicketPetitionId]       INT              NULL,
    [ErrorCode]                   INT              NULL,
    CONSTRAINT [PK_EmailQueue] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ExtraTicketPetitions]...';


GO
CREATE TABLE [dbo].[ExtraTicketPetitions] (
    [id]                              INT           IDENTITY (1, 1) NOT NULL,
    [NumberTicketsRequested]          INT           NOT NULL,
    [NumberTicketsRequestedStreaming] INT           NOT NULL,
    [IsPending]                       BIT           NOT NULL,
    [IsApproved]                      BIT           NOT NULL,
    [DateSubmitted]                   DATETIME      NOT NULL,
    [DateDecision]                    DATETIME      NULL,
    [LabelPrinted]                    BIT           NOT NULL,
    [NumberTickets]                   INT           NULL,
    [NumberTicketsStreaming]          INT           NULL,
    [Reason]                          VARCHAR (100) NULL,
    CONSTRAINT [PK_ExtraTicketPetitions] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Majors]...';


GO
CREATE TABLE [dbo].[Majors] (
    [id]                VARCHAR (4)   NOT NULL,
    [Name]              VARCHAR (30)  NOT NULL,
    [DisciplineCode]    VARCHAR (5)   NULL,
    [CollegeCode]       CHAR (2)      NULL,
    [ConsolidationCode] VARCHAR (4)   NULL,
    [IsActive]          BIT           NOT NULL,
    [FullName]          VARCHAR (100) NULL,
    CONSTRAINT [PK_Majors] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[PageTracking]...';


GO
CREATE TABLE [dbo].[PageTracking] (
    [id]          INT           IDENTITY (1, 1) NOT NULL,
    [LoginId]     VARCHAR (50)  NOT NULL,
    [Location]    VARCHAR (500) NOT NULL,
    [IPAddress]   VARCHAR (20)  NOT NULL,
    [DateTime]    DATETIME      NOT NULL,
    [IsEmulating] BIT           NOT NULL,
    CONSTRAINT [PK_PageTracking] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[RegistrationParticipations]...';


GO
CREATE TABLE [dbo].[RegistrationParticipations] (
    [id]                         INT         IDENTITY (1, 1) NOT NULL,
    [RegistrationId]             INT         NOT NULL,
    [MajorCode]                  VARCHAR (4) NOT NULL,
    [CeremonyId]                 INT         NOT NULL,
    [NumberTickets]              INT         NULL,
    [Cancelled]                  BIT         NULL,
    [LabelPrinted]               BIT         NULL,
    [ExtraTicketPetitionId]      INT         NULL,
    [DateRegistered]             DATETIME    NOT NULL,
    [DateUpdated]                DATETIME    NULL,
    [TicketDistributionMethodId] VARCHAR (2) NULL,
    CONSTRAINT [PK_RegistrationParticipations] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[RegistrationPetitions]...';


GO
CREATE TABLE [dbo].[RegistrationPetitions] (
    [id]                         INT            IDENTITY (1, 1) NOT NULL,
    [RegistrationId]             INT            NOT NULL,
    [MajorCode]                  VARCHAR (4)    NOT NULL,
    [ExceptionReason]            VARCHAR (1000) NOT NULL,
    [CompletionTerm]             VARCHAR (6)    NOT NULL,
    [TransferUnitsFrom]          VARCHAR (100)  NULL,
    [TransferUnits]              VARCHAR (5)    NULL,
    [IsPending]                  BIT            NOT NULL,
    [IsApproved]                 BIT            NOT NULL,
    [DateSubmitted]              DATETIME       NOT NULL,
    [DateDecision]               DATETIME       NULL,
    [CeremonyId]                 INT            NOT NULL,
    [NumberTickets]              INT            NOT NULL,
    [TicketDistributionMethodId] VARCHAR (2)    NULL,
    CONSTRAINT [PK_RegistrationPetitions] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Registrations]...';


GO
CREATE TABLE [dbo].[Registrations] (
    [id]          INT              IDENTITY (1, 1) NOT NULL,
    [Student_Id]  UNIQUEIDENTIFIER NOT NULL,
    [Address1]    VARCHAR (200)    NOT NULL,
    [Address2]    VARCHAR (200)    NULL,
    [City]        VARCHAR (100)    NOT NULL,
    [State]       CHAR (2)         NOT NULL,
    [Zip]         VARCHAR (15)     NOT NULL,
    [Email]       VARCHAR (100)    NULL,
    [MailTickets] BIT              NOT NULL,
    [TermCode]    VARCHAR (6)      NOT NULL,
    [GradTrack]   BIT              NOT NULL,
    CONSTRAINT [PK_Registrations] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[RegistrationSpecialNeeds]...';


GO
CREATE TABLE [dbo].[RegistrationSpecialNeeds] (
    [SpecialNeedId]  INT NOT NULL,
    [RegistrationId] INT NOT NULL,
    CONSTRAINT [PK_RegistrationSpecialNeeds] PRIMARY KEY CLUSTERED ([SpecialNeedId] ASC, [RegistrationId] ASC)
);


GO
PRINT N'Creating [dbo].[Schools]...';


GO
CREATE TABLE [dbo].[Schools] (
    [id]   CHAR (2)     NOT NULL,
    [Name] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Schools] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[SpecialNeeds]...';


GO
CREATE TABLE [dbo].[SpecialNeeds] (
    [id]       INT           IDENTITY (1, 1) NOT NULL,
    [Name]     VARCHAR (100) NOT NULL,
    [IsActive] BIT           NOT NULL,
    CONSTRAINT [PK_SpecialNeeds] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[States]...';


GO
CREATE TABLE [dbo].[States] (
    [Id]   CHAR (2)     NOT NULL,
    [Name] VARCHAR (50) NULL,
    CONSTRAINT [PK_States] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StudentMajors]...';


GO
CREATE TABLE [dbo].[StudentMajors] (
    [Student_Id] UNIQUEIDENTIFIER NOT NULL,
    [MajorCode]  VARCHAR (4)      NOT NULL,
    CONSTRAINT [PK_StudentMajors] PRIMARY KEY CLUSTERED ([Student_Id] ASC, [MajorCode] ASC)
);


GO
PRINT N'Creating [dbo].[Students]...';


GO
CREATE TABLE [dbo].[Students] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [Pidm]         VARCHAR (8)      NOT NULL,
    [StudentId]    VARCHAR (9)      NOT NULL,
    [FirstName]    VARCHAR (50)     NULL,
    [MI]           VARCHAR (50)     NULL,
    [LastName]     VARCHAR (50)     NULL,
    [EarnedUnits]  DECIMAL (6, 3)   NULL,
    [CurrentUnits] DECIMAL (6, 3)   NULL,
    [Email]        VARCHAR (100)    NULL,
    [Login]        VARCHAR (50)     NULL,
    [DateAdded]    DATETIME         NULL,
    [DateUpdated]  DATETIME         NULL,
    [TermCode]     VARCHAR (6)      NULL,
    [CeremonyId]   INT              NULL,
    [SJABlock]     BIT              NOT NULL,
    [Blocked]      BIT              NOT NULL,
    [AddedBy]      VARCHAR (50)     NULL,
    CONSTRAINT [PK_Students] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Templates]...';


GO
CREATE TABLE [dbo].[Templates] (
    [id]             INT           IDENTITY (1, 1) NOT NULL,
    [BodyText]       VARCHAR (MAX) NOT NULL,
    [TemplateTypeId] INT           NOT NULL,
    [CeremonyId]     INT           NOT NULL,
    [IsActive]       BIT           NOT NULL,
    [Subject]        VARCHAR (100) NULL,
    CONSTRAINT [PK_Templates] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[TemplateTokens]...';


GO
CREATE TABLE [dbo].[TemplateTokens] (
    [id]             INT          IDENTITY (1, 1) NOT NULL,
    [TemplateTypeId] INT          NOT NULL,
    [Name]           VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_TemplateTokens] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[TemplateTypes]...';


GO
CREATE TABLE [dbo].[TemplateTypes] (
    [id]          INT           IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (MAX) NULL,
    [Code]        CHAR (2)      NULL,
    CONSTRAINT [PK_TemplateTypes] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[TermCodes]...';


GO
CREATE TABLE [dbo].[TermCodes] (
    [id]                     VARCHAR (6)   NOT NULL,
    [Name]                   VARCHAR (50)  NOT NULL,
    [IsActive]               BIT           NOT NULL,
    [LandingText]            VARCHAR (MAX) NULL,
    [RegistrationWelcome]    VARCHAR (MAX) NULL,
    [CapAndGownDeadline]     DATE          NOT NULL,
    [FileToGraduateDeadline] DATE          NOT NULL,
    CONSTRAINT [PK_TermCodes] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[TicketDistributionMethods]...';


GO
CREATE TABLE [dbo].[TicketDistributionMethods] (
    [Id]       VARCHAR (2)  NOT NULL,
    [Name]     VARCHAR (50) NOT NULL,
    [IsActive] BIT          NOT NULL,
    CONSTRAINT [PK_TicketDistributionMethods] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating DF_Ceremonies_HasStreamingTickets...';


GO
ALTER TABLE [dbo].[Ceremonies]
    ADD CONSTRAINT [DF_Ceremonies_HasStreamingTickets] DEFAULT ((0)) FOR [HasStreamingTickets];


GO
PRINT N'Creating DF__Ceremonie__MailT__4959E263...';


GO
ALTER TABLE [dbo].[Ceremonies]
    ADD CONSTRAINT [DF__Ceremonie__MailT__4959E263] DEFAULT ((0)) FOR [MailTickets];


GO
PRINT N'Creating DF__Ceremonie__Picku__4865BE2A...';


GO
ALTER TABLE [dbo].[Ceremonies]
    ADD CONSTRAINT [DF__Ceremonie__Picku__4865BE2A] DEFAULT ((1)) FOR [PickupTickets];


GO
PRINT N'Creating DF_CommencementEditors_Owner...';


GO
ALTER TABLE [dbo].[CeremonyEditors]
    ADD CONSTRAINT [DF_CommencementEditors_Owner] DEFAULT ((0)) FOR [Owner];


GO
PRINT N'Creating DF_Colleges_Display...';


GO
ALTER TABLE [dbo].[Colleges]
    ADD CONSTRAINT [DF_Colleges_Display] DEFAULT ((0)) FOR [Display];


GO
PRINT N'Creating DF_EmailQueue_Pending...';


GO
ALTER TABLE [dbo].[EmailQueue]
    ADD CONSTRAINT [DF_EmailQueue_Pending] DEFAULT ((1)) FOR [Pending];


GO
PRINT N'Creating DF_EmailQueue_Immediate...';


GO
ALTER TABLE [dbo].[EmailQueue]
    ADD CONSTRAINT [DF_EmailQueue_Immediate] DEFAULT ((0)) FOR [Immediate];


GO
PRINT N'Creating DF_ExtraTicketPetitions_IsPending...';


GO
ALTER TABLE [dbo].[ExtraTicketPetitions]
    ADD CONSTRAINT [DF_ExtraTicketPetitions_IsPending] DEFAULT ((1)) FOR [IsPending];


GO
PRINT N'Creating DF_ExtraTicketPetitions_IsApproved...';


GO
ALTER TABLE [dbo].[ExtraTicketPetitions]
    ADD CONSTRAINT [DF_ExtraTicketPetitions_IsApproved] DEFAULT ((0)) FOR [IsApproved];


GO
PRINT N'Creating DF_ExtraTicketPetitions_DateSubmitted...';


GO
ALTER TABLE [dbo].[ExtraTicketPetitions]
    ADD CONSTRAINT [DF_ExtraTicketPetitions_DateSubmitted] DEFAULT (getdate()) FOR [DateSubmitted];


GO
PRINT N'Creating DF_ExtraTicketPetitions_LabelPrinted...';


GO
ALTER TABLE [dbo].[ExtraTicketPetitions]
    ADD CONSTRAINT [DF_ExtraTicketPetitions_LabelPrinted] DEFAULT ((0)) FOR [LabelPrinted];


GO
PRINT N'Creating DF_Majors_IsActive...';


GO
ALTER TABLE [dbo].[Majors]
    ADD CONSTRAINT [DF_Majors_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating DF_PageTracking_DateTime...';


GO
ALTER TABLE [dbo].[PageTracking]
    ADD CONSTRAINT [DF_PageTracking_DateTime] DEFAULT (getdate()) FOR [DateTime];


GO
PRINT N'Creating DF_PageTracking_IsEmulating...';


GO
ALTER TABLE [dbo].[PageTracking]
    ADD CONSTRAINT [DF_PageTracking_IsEmulating] DEFAULT ((0)) FOR [IsEmulating];


GO
PRINT N'Creating DF_RegistrationParticipations_Cancelled...';


GO
ALTER TABLE [dbo].[RegistrationParticipations]
    ADD CONSTRAINT [DF_RegistrationParticipations_Cancelled] DEFAULT ((0)) FOR [Cancelled];


GO
PRINT N'Creating DF_RegistrationParticipations_LabelPrinted...';


GO
ALTER TABLE [dbo].[RegistrationParticipations]
    ADD CONSTRAINT [DF_RegistrationParticipations_LabelPrinted] DEFAULT ((0)) FOR [LabelPrinted];


GO
PRINT N'Creating DF_RegistrationParticipations_DateRegistered...';


GO
ALTER TABLE [dbo].[RegistrationParticipations]
    ADD CONSTRAINT [DF_RegistrationParticipations_DateRegistered] DEFAULT (getdate()) FOR [DateRegistered];


GO
PRINT N'Creating DF_RegistrationPetitions_IsPending...';


GO
ALTER TABLE [dbo].[RegistrationPetitions]
    ADD CONSTRAINT [DF_RegistrationPetitions_IsPending] DEFAULT ((1)) FOR [IsPending];


GO
PRINT N'Creating DF_RegistrationPetitions_IsApproved...';


GO
ALTER TABLE [dbo].[RegistrationPetitions]
    ADD CONSTRAINT [DF_RegistrationPetitions_IsApproved] DEFAULT ((0)) FOR [IsApproved];


GO
PRINT N'Creating DF_RegistrationPetitions_DateSubmitted...';


GO
ALTER TABLE [dbo].[RegistrationPetitions]
    ADD CONSTRAINT [DF_RegistrationPetitions_DateSubmitted] DEFAULT (getdate()) FOR [DateSubmitted];


GO
PRINT N'Creating DF_Registrations_MailTickets...';


GO
ALTER TABLE [dbo].[Registrations]
    ADD CONSTRAINT [DF_Registrations_MailTickets] DEFAULT ((0)) FOR [MailTickets];


GO
PRINT N'Creating DF_Registrations_GradTrack...';


GO
ALTER TABLE [dbo].[Registrations]
    ADD CONSTRAINT [DF_Registrations_GradTrack] DEFAULT ((0)) FOR [GradTrack];


GO
PRINT N'Creating DF_SpecialNeeds_IsActive...';


GO
ALTER TABLE [dbo].[SpecialNeeds]
    ADD CONSTRAINT [DF_SpecialNeeds_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating DF_Students_Id...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_Students_DatedAdded...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_DatedAdded] DEFAULT (getdate()) FOR [DateAdded];


GO
PRINT N'Creating DF_Students_DateUpdated...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_DateUpdated] DEFAULT (getdate()) FOR [DateUpdated];


GO
PRINT N'Creating DF_Students_SJABlock...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_SJABlock] DEFAULT ((0)) FOR [SJABlock];


GO
PRINT N'Creating DF_Students_Removed...';


GO
ALTER TABLE [dbo].[Students]
    ADD CONSTRAINT [DF_Students_Removed] DEFAULT ((0)) FOR [Blocked];


GO
PRINT N'Creating DF_Templates_IsActive...';


GO
ALTER TABLE [dbo].[Templates]
    ADD CONSTRAINT [DF_Templates_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating DF_TermCodes_IsActive...';


GO
ALTER TABLE [dbo].[TermCodes]
    ADD CONSTRAINT [DF_TermCodes_IsActive] DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating DF_TicketDistributionMethods_IsActive...';


GO
ALTER TABLE [dbo].[TicketDistributionMethods]
    ADD CONSTRAINT [DF_TicketDistributionMethods_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating FK_Audits_ActionCodes1...';


GO
ALTER TABLE [dbo].[Audits] WITH NOCHECK
    ADD CONSTRAINT [FK_Audits_ActionCodes1] FOREIGN KEY ([AuditActionTypeId]) REFERENCES [dbo].[AuditActionTypes] ([ID]);


GO
PRINT N'Creating FK_Commencements_TermCodes...';


GO
ALTER TABLE [dbo].[Ceremonies] WITH NOCHECK
    ADD CONSTRAINT [FK_Commencements_TermCodes] FOREIGN KEY ([TermCode]) REFERENCES [dbo].[TermCodes] ([id]);


GO
PRINT N'Creating FK_CeremonyColleges_Ceremonies...';


GO
ALTER TABLE [dbo].[CeremonyColleges] WITH NOCHECK
    ADD CONSTRAINT [FK_CeremonyColleges_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_CeremonyColleges_Colleges...';


GO
ALTER TABLE [dbo].[CeremonyColleges] WITH NOCHECK
    ADD CONSTRAINT [FK_CeremonyColleges_Colleges] FOREIGN KEY ([CollegeCode]) REFERENCES [dbo].[Colleges] ([id]);


GO
PRINT N'Creating FK_CommencementEditors_Commencements...';


GO
ALTER TABLE [dbo].[CeremonyEditors] WITH NOCHECK
    ADD CONSTRAINT [FK_CommencementEditors_Commencements] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_CeremonyMajors_Majors...';


GO
ALTER TABLE [dbo].[CeremonyMajors] WITH NOCHECK
    ADD CONSTRAINT [FK_CeremonyMajors_Majors] FOREIGN KEY ([MajorCode]) REFERENCES [dbo].[Majors] ([id]);


GO
PRINT N'Creating FK_CommencementMajors_Commencements...';


GO
ALTER TABLE [dbo].[CeremonyMajors] WITH NOCHECK
    ADD CONSTRAINT [FK_CommencementMajors_Commencements] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_CeremonyXTicketDistributionMethods_Ceremonies...';


GO
ALTER TABLE [dbo].[CeremonyXTicketDistributionMethods] WITH NOCHECK
    ADD CONSTRAINT [FK_CeremonyXTicketDistributionMethods_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_CeremonyXTicketDistributionMethods_TicketDistributionMethods...';


GO
ALTER TABLE [dbo].[CeremonyXTicketDistributionMethods] WITH NOCHECK
    ADD CONSTRAINT [FK_CeremonyXTicketDistributionMethods_TicketDistributionMethods] FOREIGN KEY ([TicketDistributionMethodId]) REFERENCES [dbo].[TicketDistributionMethods] ([Id]);


GO
PRINT N'Creating FK_EmailQueue_ExtraTicketPetitions...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_ExtraTicketPetitions] FOREIGN KEY ([ExtraTicketPetitionId]) REFERENCES [dbo].[ExtraTicketPetitions] ([id]);


GO
PRINT N'Creating FK_EmailQueue_RegistrationParticipations...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_RegistrationParticipations] FOREIGN KEY ([RegistrationParticipationId]) REFERENCES [dbo].[RegistrationParticipations] ([id]);


GO
PRINT N'Creating FK_EmailQueue_RegistrationPetitions...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_RegistrationPetitions] FOREIGN KEY ([RegistrationPetitionId]) REFERENCES [dbo].[RegistrationPetitions] ([id]);


GO
PRINT N'Creating FK_EmailQueue_Registrations...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_Registrations] FOREIGN KEY ([RegistrationId]) REFERENCES [dbo].[Registrations] ([id]);


GO
PRINT N'Creating FK_EmailQueue_Students...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_Students] FOREIGN KEY ([Student_Id]) REFERENCES [dbo].[Students] ([Id]);


GO
PRINT N'Creating FK_EmailQueue_Templates...';


GO
ALTER TABLE [dbo].[EmailQueue] WITH NOCHECK
    ADD CONSTRAINT [FK_EmailQueue_Templates] FOREIGN KEY ([TemplateId]) REFERENCES [dbo].[Templates] ([id]);


GO
PRINT N'Creating FK_Majors_Colleges...';


GO
ALTER TABLE [dbo].[Majors] WITH NOCHECK
    ADD CONSTRAINT [FK_Majors_Colleges] FOREIGN KEY ([CollegeCode]) REFERENCES [dbo].[Colleges] ([id]);


GO
PRINT N'Creating FK_Majors_Majors...';


GO
ALTER TABLE [dbo].[Majors] WITH NOCHECK
    ADD CONSTRAINT [FK_Majors_Majors] FOREIGN KEY ([ConsolidationCode]) REFERENCES [dbo].[Majors] ([id]);


GO
PRINT N'Creating FK_RegistrationParticipations_Ceremonies...';


GO
ALTER TABLE [dbo].[RegistrationParticipations] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationParticipations_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_RegistrationParticipations_ExtraTicketPetitions...';


GO
ALTER TABLE [dbo].[RegistrationParticipations] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationParticipations_ExtraTicketPetitions] FOREIGN KEY ([ExtraTicketPetitionId]) REFERENCES [dbo].[ExtraTicketPetitions] ([id]);


GO
PRINT N'Creating FK_RegistrationParticipations_Registrations...';


GO
ALTER TABLE [dbo].[RegistrationParticipations] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationParticipations_Registrations] FOREIGN KEY ([RegistrationId]) REFERENCES [dbo].[Registrations] ([id]);


GO
PRINT N'Creating FK_RegistrationPetitions_Ceremonies...';


GO
ALTER TABLE [dbo].[RegistrationPetitions] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationPetitions_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_RegistrationPetitions_RegistrationPetitions...';


GO
ALTER TABLE [dbo].[RegistrationPetitions] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationPetitions_RegistrationPetitions] FOREIGN KEY ([RegistrationId]) REFERENCES [dbo].[Registrations] ([id]);


GO
PRINT N'Creating FK_RegistrationPetitions_TicketDistributionMethods...';


GO
ALTER TABLE [dbo].[RegistrationPetitions] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationPetitions_TicketDistributionMethods] FOREIGN KEY ([TicketDistributionMethodId]) REFERENCES [dbo].[TicketDistributionMethods] ([Id]);


GO
PRINT N'Creating FK_Registrations_Registrations...';


GO
ALTER TABLE [dbo].[Registrations] WITH NOCHECK
    ADD CONSTRAINT [FK_Registrations_Registrations] FOREIGN KEY ([id]) REFERENCES [dbo].[Registrations] ([id]);


GO
PRINT N'Creating FK_Registrations_States...';


GO
ALTER TABLE [dbo].[Registrations] WITH NOCHECK
    ADD CONSTRAINT [FK_Registrations_States] FOREIGN KEY ([State]) REFERENCES [dbo].[States] ([Id]);


GO
PRINT N'Creating FK_Registrations_Students...';


GO
ALTER TABLE [dbo].[Registrations] WITH NOCHECK
    ADD CONSTRAINT [FK_Registrations_Students] FOREIGN KEY ([Student_Id]) REFERENCES [dbo].[Students] ([Id]);


GO
PRINT N'Creating FK_Registrations_TermCodes...';


GO
ALTER TABLE [dbo].[Registrations] WITH NOCHECK
    ADD CONSTRAINT [FK_Registrations_TermCodes] FOREIGN KEY ([TermCode]) REFERENCES [dbo].[TermCodes] ([id]);


GO
PRINT N'Creating FK_RegistrationSpecialNeeds_Registrations...';


GO
ALTER TABLE [dbo].[RegistrationSpecialNeeds] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationSpecialNeeds_Registrations] FOREIGN KEY ([RegistrationId]) REFERENCES [dbo].[Registrations] ([id]);


GO
PRINT N'Creating FK_RegistrationSpecialNeeds_SpecialNeeds...';


GO
ALTER TABLE [dbo].[RegistrationSpecialNeeds] WITH NOCHECK
    ADD CONSTRAINT [FK_RegistrationSpecialNeeds_SpecialNeeds] FOREIGN KEY ([SpecialNeedId]) REFERENCES [dbo].[SpecialNeeds] ([id]);


GO
PRINT N'Creating FK_StudentMajors_Majors...';


GO
ALTER TABLE [dbo].[StudentMajors] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentMajors_Majors] FOREIGN KEY ([MajorCode]) REFERENCES [dbo].[Majors] ([id]);


GO
PRINT N'Creating FK_StudentMajors_Students...';


GO
ALTER TABLE [dbo].[StudentMajors] WITH NOCHECK
    ADD CONSTRAINT [FK_StudentMajors_Students] FOREIGN KEY ([Student_Id]) REFERENCES [dbo].[Students] ([Id]);


GO
PRINT N'Creating FK_Students_Ceremonies...';


GO
ALTER TABLE [dbo].[Students] WITH NOCHECK
    ADD CONSTRAINT [FK_Students_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_Templates_Ceremonies...';


GO
ALTER TABLE [dbo].[Templates] WITH NOCHECK
    ADD CONSTRAINT [FK_Templates_Ceremonies] FOREIGN KEY ([CeremonyId]) REFERENCES [dbo].[Ceremonies] ([id]);


GO
PRINT N'Creating FK_Templates_TemplateTypes...';


GO
ALTER TABLE [dbo].[Templates] WITH NOCHECK
    ADD CONSTRAINT [FK_Templates_TemplateTypes] FOREIGN KEY ([TemplateTypeId]) REFERENCES [dbo].[TemplateTypes] ([id]);


GO
PRINT N'Creating FK_TemplateTokens_TemplateTypes...';


GO
ALTER TABLE [dbo].[TemplateTokens] WITH NOCHECK
    ADD CONSTRAINT [FK_TemplateTokens_TemplateTypes] FOREIGN KEY ([TemplateTypeId]) REFERENCES [dbo].[TemplateTypes] ([id]);


GO
PRINT N'Creating [dbo].[udf_GetSpecialNeedsCSV]...';


GO
-- =============================================
-- Author:		Alan Lai
-- Create date: 1/27/2011	
-- Description:	Takes a list of values from a table to
--				return a set csv
-- =============================================
CREATE FUNCTION udf_GetSpecialNeedsCSV
(
	@id int	-- Registration Id
)
RETURNS varchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @results varchar(max)

	select @results = coalesce(@results + ', ', '') + sn.Name
	from RegistrationSpecialNeeds rpn 
		inner join SpecialNeeds sn on rpn.SpecialNeedId = sn.id
	where rpn.RegistrationId = @id

	-- Return the result of the function
	return @results

END
GO
PRINT N'Creating [dbo].[vTermCodes]...';


GO
CREATE VIEW [dbo].[vTermCodes]
AS
SELECT     Students.dbo.TermCodes.id, Students.dbo.TermCodes.Description, Students.dbo.TermCodes.StartDate, Students.dbo.TermCodes.EndDate, Students.dbo.TermCodes.TypeCode
FROM         Students.dbo.TermCodes
GO
PRINT N'Creating [dbo].[vUsers]...';


GO
CREATE VIEW dbo.vUsers
AS
SELECT        UserID AS id, LoginID, Email, Phone, FirstName, LastName, EmployeeID, SID, UserKey
FROM            Catbert3.dbo.Users
WHERE        (Inactive = 0) AND (UserID IN
                             (SELECT        p.UserID
                               FROM            Catbert3.dbo.Permissions AS p INNER JOIN
                                                         Catbert3.dbo.Applications AS a ON p.ApplicationID = a.ApplicationID
                               WHERE        (a.Name = 'Commencement') AND (p.Inactive = 0)))
GO
PRINT N'Creating [dbo].[usp_DownloadMissingMajors]...';


GO

CREATE PROCEDURE [dbo].[usp_DownloadMissingMajors]
	
AS
	
	-- declare variables
	declare @term varchar(6), @id uniqueidentifier, @pidm varchar(7), @tsql varchar(max)

	-- create the temp table
	IF object_id('tempdb..#StudentMajors') IS NOT NULL
	BEGIN
		DROP TABLE #StudentMajors
	END

	CREATE TABLE #StudentMajors
	(
		id uniqueidentifier,
		major varchar(4)
	)

	-- get the current term
	set @term = (select MAX(id) from termcodes where isactive = 1)
																	
	declare @students cursor
	set @students = cursor for
		select id, pidm from students
		where id not in (select student_id from studentmajors)
		  and termcode = @term
	 
	open @students

	fetch next from @students into @id, @pidm	

	while(@@fetch_status = 0)
	begin
		delete from #StudentMajors

		set @tsql = '
			insert into #StudentMajors (major)
			select zgvlcfs_majr_code from openquery (sis, '' 
				select zgvlcfs_majr_code from zgvlcfs 
				where zgvlcfs_pidm = ''''' + @pidm + '''''
				  and zgvlcfs_levl_code in (''''UG'''', ''''U2'''')
				  and zgvlcfs_term_code_eff in ( select max(izgvlcfs.zgvlcfs_term_code_eff) from zgvlcfs izgvlcfs where zgvlcfs.zgvlcfs_pidm = izgvlcfs.zgvlcfs_pidm )
			'')
		'
		exec(@tsql)

		update #StudentMajors set id = @id
	
		merge studentmajors as t
		using #studentmajors as s
		on t.student_id = s.id and t.majorcode = s.major
		when not matched
		then insert (student_id, majorcode) values(s.id, s.major);
	
		fetch next from @students into @id, @pidm	

	end

	close @students
	deallocate @students

RETURN 0
GO
PRINT N'Creating [dbo].[usp_DownloadStudentsMultiCollege]...';


GO

CREATE PROCEDURE [dbo].[usp_DownloadStudentsMultiCollege]
AS
    
IF object_id('tempdb..#Students') IS NOT NULL
BEGIN
    DROP TABLE #Students
END

CREATE TABLE #Students
(
    pidm varchar(8),
    studentid varchar(9),
    firstName varchar(50),
    MI varchar(50),
    LastName varchar(50),
    EarnedUnits decimal(6,3),
    CurrentUnits decimal(6,3),
    Email varchar(100),
    LoginId varchar(50),
    std varchar(2),
    major varchar(4)
)

declare @term varchar(6), @sisterm varchar(6), @minUnits int, @coll char(2)
declare @tsql varchar(max)

if (not exists (select * from termcodes where isactive = 1) )
begin
    return 1
end

set @term = (select MAX(id) from termcodes where isactive = 1)
select @sisterm = term from openquery(sis, '
											select min(stvterm_code) term
											from stvterm
											where stvterm_end_date > sysdate
											  and stvterm_trmt_code = ''Q''
										')
set @minUnits = (select min(PetitionThreshold) from Ceremonies where termcode = @term)    

if (GETDATE() + 8 < (select MIN(RegistrationBegin) from Ceremonies) or
	getdate() > (select MAX(registrationdeadline) from ceremonies) )
	begin
		return 2
	end
	
set @tsql = '
	insert into #students (pidm, studentid, firstname, mi, lastname, earnedunits, currentunits, email, loginid, std, major)
	select spriden_pidm, spriden_id, spriden_first_name, spriden_mi, spriden_last_name
		, earnedunits, currentunits, goremal_email_address, loginid, shrttrm_astd_code_end_of_term
		, zgvlcfs_majr_code
	from openquery(sis, ''
		select spriden_pidm, spriden_id, spriden_first_name, spriden_mi, spriden_last_name
			, EarnedUnits.shrlgpa_hours_earned as EarnedUnits
			, 0 as CurrentUnits
			, email.goremal_email_address
			, lower(wormoth_login_id) loginId
			, shrttrm_astd_code_end_of_term
			, zgvlcfs_majr_code
		from zgvlcfs
			inner join spriden on spriden_pidm = zgvlcfs_pidm
			inner join shrlgpa earnedUnits on earnedUnits.shrlgpa_pidm = zgvlcfs_pidm
			left outer join (
				select goremal_pidm, goremal_email_address
				from goremal
				where goremal_emal_code = ''''UCD''''
					and goremal_status_ind = ''''A''''
			) email on email.goremal_pidm = zgvlcfs_pidm
			inner join wormoth on wormoth_pidm = zgvlcfs_pidm
			left outer join shrttrm on shrttrm_pidm = zgvlcfs_pidm
		where spriden_change_ind is null
			and zgvlcfs_term_code_eff = '''''+@sisterm+'''''
			and EarnedUnits.shrlgpa_hours_earned > ' + CAST(@minUnits as varchar(6)) + '
			and shrttrm_term_code in ( select max(shrttrm_term_code) from shrttrm ishrttrm where shrttrm.shrttrm_pidm = ishrttrm.shrttrm_pidm )
			and wormoth_acct_type = ''''Z''''
			and wormoth_acct_status = ''''A''''
			and earnedUnits.shrlgpa_gpa_type_ind = ''''O''''
			and earnedUnits.shrlgpa_levL_code = ''''UG''''
	'')
'

exec (@tsql)

insert into Majors ( id, name, IsActive )
select distinct major, 'unknown', 0 from #Students
where major not in ( select id from Majors )

merge into students t
using (	select distinct pidm, studentid, firstname, mi
                    , lastname, earnedunits, currentUnits, email, loginid, @term as termcode
        from #students where (std is null or std <> 'DS')) s
on t.pidm = s.pidm and t.termcode = s.termcode
when matched then update
	-- only update the units
	set t.earnedunits = s.earnedunits, t.currentunits = s.currentunits, dateupdated = getdate()
when not matched then
    insert (pidm, studentid, firstname, mi, lastname, earnedunits, CurrentUnits, email, termcode, [login])
    values(s.pidm, s.studentid, s.firstname, s.mi, s.lastname, s.earnedunits, s.currentunits, s.email, s.termcode, s.[loginId]);

-- delete the student majors for which wee have an update for them
delete from StudentMajors
where Student_Id in ( select id from Students where studentId in ( select studentid from #students ) )

-- insert the updated student majors
insert into StudentMajors 
select distinct students.id, major from #students
        inner join students on #students.pidm = students.pidm and students.termcode = @term
    
DROP TABLE #Students

RETURN 0
GO
PRINT N'Creating [dbo].[usp_LookupStudentName]...';


GO

CREATE Procedure usp_LookupStudentName
	(
		@studentid varchar(9)
	)

AS

	IF object_id('tempdb..#StudentNames') IS NOT NULL
	BEGIN
		DROP TABLE #StudentNames
	END

	create table #StudentNames
	(
		pidm varchar(8),
		firstname varchar(50),
		mi varchar(50),
		lastname varchar(50),
		loginid varchar(50),
		email varchar(50)
	)

	declare @tsql varchar(max)

	set @tsql = '
	
		insert into #studentnames (pidm, firstname, mi, lastname, loginid, email)
		select spriden_pidm, spriden_first_name, spriden_mi, spriden_last_name, loginid, email from openquery (sis, ''
		
			select spriden_pidm, spriden_first_name, spriden_mi, spriden_last_name, lower(wormoth_login_id) as loginid, email.goremal_email_address as email
			from spriden
				left outer join wormoth on wormoth_pidm = spriden_pidm
				left outer join (
					select goremal_pidm, goremal_email_address
					from goremal
					where goremal_emal_code = ''''UCD''''
					  and goremal_status_ind = ''''A''''
				) email on email.goremal_pidm = spriden_pidm
			where spriden_change_ind is null
			  and spriden_id = ''''' + @studentid + '''''

		'')

	'

	exec(@tsql)

	select * from #StudentNames

	drop table #StudentNames
GO
PRINT N'Creating [dbo].[usp_MajorCountByCeremony]...';


GO

CREATE PROCEDURE [dbo].[usp_MajorCountByCeremony]
	@ceremonyId int, 
	@userId int
AS

/*
	Count of students by major
*/

select count(rp.id) num, isnull(m.fullname, m.name + '[Banner Name]') name, c.datetime
from registrationparticipations rp
	inner join registrations r on r.id = rp.registrationid
	inner join students s on r.student_id = s.id
	inner join majors m on rp.majorcode = m.id
	inner join ceremonies c on rp.ceremonyid = c.id
where rp.ceremonyid = @ceremonyId
  and cancelled = 0
  and sjablock = 0 and blocked = 0
group by m.fullname, m.name, c.datetime
order by m.name

RETURN 0
GO
PRINT N'Creating [dbo].[usp_ProcessMailing]...';


GO
CREATE PROCEDURE [dbo].[usp_ProcessMailing]
	@immediate bit
AS
	
	declare @subject varchar(100), @body varchar(max), @emails varchar(max), @queueId int
	declare @automatedEmail varchar(50) = 'automatedemail@caes.ucdavis.edu'
	declare @queue cursor

	set @queue = cursor for
		select emailqueue.id, [subject], [body]
			,case 
				when registrations.email is null then students.email
				else students.email + ';' + registrations.email
				end as emails
		from emailqueue
			inner join Students on students.Id = EmailQueue.Student_Id
			inner join Registrations on registrations.id = EmailQueue.RegistrationId
		where Pending = 1
		  and [immediate] = @immediate
	
	open @queue

	fetch next from @queue into @queueId, @subject, @body, @emails

	while (@@FETCH_STATUS = 0)
	begin
	
		exec msdb.dbo.sp_send_dbmail
			@recipients = @emails,
			@blind_copy_recipients = @automatedEmail,
			@subject = @subject,
			@body = @body,
			@body_format = 'HTML';
		
		update emailqueue
		set errorcode = @@ERROR, SentDateTime = GETDATE(), Pending = 0
		where id = @queueId

		fetch next from @queue into @queueId, @subject, @body, @emails
	end

	close @queue
	deallocate @queue

RETURN 0
GO
PRINT N'Creating [dbo].[usp_RegistrarReport]...';


GO

CREATE PROCEDURE [dbo].[usp_RegistrarReport]
	@term varchar(6),
	@userId int
AS

/*
	Registrar requires a list of all participating students
*/

select stud.StudentId, stud.LastName, stud.FirstName, stud.MI, rp.MajorCode
from RegistrationParticipations rp
	inner join Registrations reg on rp.RegistrationId = reg.id
	inner join Students stud on reg.Student_Id = stud.Id
where stud.SJABlock = 0
  and rp.Cancelled = 0
  and rp.CeremonyId in ( select CeremonyId from CeremonyEditors 
									inner join Ceremonies on CeremonyEditors.CeremonyId = Ceremonies.id
						 where UserId = @userId
						   and Ceremonies.TermCode = @term
					    )
order by stud.LastName

RETURN 0
GO
PRINT N'Creating [dbo].[usp_SearchStudent]...';


GO

CREATE Procedure usp_SearchStudent
	(
		@studentid varchar(9)
	)

AS

	IF object_id('tempdb..#Students') IS NOT NULL
	BEGIN
		DROP TABLE #Students
	END

	CREATE TABLE #Students
	(
		pidm varchar(8),
		studentid varchar(9),
		firstName varchar(50),
		MI varchar(50),
		LastName varchar(50),
		Email varchar(100),
		EarnedUnits decimal(6,3),
		CurrentUnits decimal(6,3),
		major varchar(4),	
		lastTerm varchar(6),
		astd varchar(2),
		LoginId varchar(50)
	)


	declare @tsql varchar(max)
	
	set @tsql = '
		insert into #Students
		select pidm, studentid
			 , firstname, mi, lastname
			 , email, earnedunits, currentunits
			 , major, lastterm, astd, loginid
			from openquery (sis, ''
			select spriden_pidm as pidm, spriden_id as studentId
			, spriden_first_name  as firstName, spriden_mi as mi, spriden_last_name as lastName
			, email.goremal_email_address as email
			, shrlgpa_hours_earned earnedUnits, 0 as currentUnits
			, zgvlcfs_majr_code as major
			, zgvlcfs_term_code_eff as lastTerm
			, shrttrm_astd_code_end_of_term as astd
			, lower(wormoth_login_id) as loginid
		from spriden
			inner join zgvlcfs on spriden_pidm = zgvlcfs_pidm
			inner join wormoth on spriden_pidm = wormoth_pidm
			inner join shrlgpa on spriden_pidm = shrlgpa_pidm
			left outer join shrttrm on spriden_pidm = shrttrm_pidm
			left outer join (
				select goremal_pidm, goremal_email_address
				from goremal
				where goremal_emal_code = ''''UCD''''
				  and goremal_status_ind = ''''A''''
			) email on email.goremal_pidm = spriden_pidm
		where spriden_id = ''''' + @studentid + '''''
		  and zgvlcfs_term_code_eff in (select max(zgvlcfs_term_code_eff) from zgvlcfs izgvlcfs where izgvlcfs.zgvlcfs_pidm = zgvlcfs.zgvlcfs_pidm)
		  and spriden_change_ind is null
		  and shrlgpa_gpa_type_ind = ''''O'''' and shrlgpa_levl_code = ''''UG''''
		  and shrttrm_term_code in ( select max(shrttrm_term_code) from shrttrm ishrttrm where ishrttrm.shrttrm_pidm = shrttrm.shrttrm_pidm and shrttrm_astd_code_end_of_term is not null )
		'')
	'
	exec(@tsql)


	if not exists (select * from #Students)
	begin

		set @tsql = '
			insert into #Students
			select pidm, studentid
				 , firstname, mi, lastname
				 , email, earnedunits, currentunits
				 , major, lastterm, astd, loginid
				from openquery (sis, ''
				select spriden_pidm as pidm, spriden_id as studentId
				, spriden_first_name  as firstName, spriden_mi as mi, spriden_last_name as lastName
				, email.goremal_email_address as email
				, shrlgpa_hours_earned earnedUnits, 0 as currentUnits
				, zgvlcfs_majr_code as major
				, zgvlcfs_term_code_eff as lastTerm
				, shrttrm_astd_code_end_of_term as astd
				, lower(wormoth_login_id) as loginid
			from spriden
				inner join zgvlcfs on spriden_pidm = zgvlcfs_pidm
				inner join wormoth on spriden_pidm = wormoth_pidm
				inner join shrlgpa on spriden_pidm = shrlgpa_pidm
				left outer join shrttrm on spriden_pidm = shrttrm_pidm
				left outer join (
					select goremal_pidm, goremal_email_address
					from goremal
					where goremal_emal_code = ''''UCD''''
					  and goremal_status_ind = ''''A''''
				) email on email.goremal_pidm = spriden_pidm
			where spriden_id = ''''' + @studentid + '''''
			  and zgvlcfs_term_code_eff in (select max(zgvlcfs_term_code_eff) from zgvlcfs izgvlcfs where izgvlcfs.zgvlcfs_pidm = zgvlcfs.zgvlcfs_pidm)
			  and spriden_change_ind is null
			  and shrlgpa_gpa_type_ind = ''''O'''' and shrlgpa_levl_code = ''''U2''''
			  and shrttrm_term_code in ( select max(shrttrm_term_code) from shrttrm ishrttrm where ishrttrm.shrttrm_pidm = shrttrm.shrttrm_pidm and shrttrm_astd_code_end_of_term is not null )
			'')
		'
		exec(@tsql)

	end

	select * from #students

	drop table #students
GO
PRINT N'Creating [dbo].[usp_SearchStudentByLogin]...';


GO

CREATE Procedure usp_SearchStudentByLogin
	(
		@login varchar(50)
	)

AS

	declare @tsql varchar(max)
	
	set @login = upper(@login)
	
	set @tsql = '
		select * from openquery(sis, ''
			select spriden_pidm as pidm, spriden_id as studentId
			, spriden_first_name  as firstName, spriden_mi as mi, spriden_last_name as lastName
			, email.goremal_email_address as email
			, shrlgpa_hours_earned earnedUnits, 0 as currentUnits
			, zgvlcfs_majr_code as major
			, zgvlcfs_term_code_eff as lastTerm
			, shrttrm_astd_code_end_of_term as astd
			, lower(wormoth_login_id) as loginid
		from wormoth
			inner join zgvlcfs on wormoth_pidm = zgvlcfs_pidm
			inner join spriden on wormoth_pidm = spriden_pidm
			inner join shrlgpa on wormoth_pidm = shrlgpa_pidm
			left outer join shrttrm on wormoth_pidm = shrttrm_pidm
			left outer join (
				select goremal_pidm, goremal_email_address
				from goremal
				where goremal_emal_code = ''''UCD''''
					and goremal_status_ind = ''''A''''
			) email on email.goremal_pidm = wormoth_pidm
		where wormoth_login_id = ''''' + @login + '''''
		  and zgvlcfs_term_code_eff in (select max(zgvlcfs_term_code_eff) from zgvlcfs izgvlcfs where izgvlcfs.zgvlcfs_pidm = zgvlcfs.zgvlcfs_pidm)
		  and spriden_change_ind is null
		  and shrlgpa_gpa_type_ind = ''''O'''' and shrlgpa_levl_code = ''''UG''''
		  and shrttrm_term_code in ( select max(shrttrm_term_code) from shrttrm ishrttrm where ishrttrm.shrttrm_pidm = shrttrm.shrttrm_pidm and shrttrm_astd_code_end_of_term is not null )
		'')
	'

	--set @tsql = '
	--	select * from openquery(sis, ''
	--		select spriden_pidm as pidm, spriden_id as studentId
	--			, spriden_first_name as firstName, spriden_mi as mi, spriden_last_name as lastName
	--			, email.goremal_email_address as email
	--			, earnedunits.units as earnedunits
	--			, 0 as currentunits
	--			, zgvlcfs_majr_code as major
	--			, zgvlcfs_term_code_eff as lastTerm
	--			, shrttrm_astd_code_end_of_term as astd
	--			, lower(wormoth_login_id) as loginid
	--		from wormoth 
	--			inner join zgvlcfs on wormoth_pidm = zgvlcfs_pidm
	--			inner join spriden on wormoth_pidm = spriden_pidm
	--			left outer join (
	--				select shrttrm_pidm as pidm, shrttrm_astd_code_end_of_term
	--				from shrttrm
	--				where shrttrm_term_code in (select max(shrttrm_term_code) from shrttrm ishrttrm
	--											where ishrttrm.shrttrm_Pidm = shrttrm.shrttrm_pidm)
	--			) astd on astd.pidm = wormoth_pidm
	--			left outer join (
	--				select goremal_pidm, goremal_email_address
	--				from goremal
	--				where goremal_emal_code = ''''UCD''''
	--					and goremal_status_ind = ''''A''''
	--			) email on email.goremal_pidm = wormoth_pidm
	--			inner join (
	--				select shrlgpa_pidm as pidm, shrlgpa_hours_earned units
	--				from shrlgpa
	--				where shrlgpa_gpa_type_ind = ''''O'''' and shrlgpa_levl_code = ''''UG''''
	--			) EarnedUnits on EarnedUnits.pidm = zgvlcfs_pidm
	--		where wormoth_login_id = ''''' + @login + '''''
	--			and zgvlcfs_term_code_eff in (select max(zgvlcfs_term_code_eff) from zgvlcfs izgvlcfs where izgvlcfs.zgvlcfs_pidm = zgvlcfs.zgvlcfs_pidm)
	--			and spriden_change_ind is null
	--	'')'

exec(@tsql)
GO
PRINT N'Creating [dbo].[usp_SpecialNeedsReport]...';


GO

CREATE PROCEDURE [dbo].[usp_SpecialNeedsReport]
    @term varchar(6),
    @userid int
AS

/*
	Returns a list of students with special needs marked
*/
    
select students.LastName, students.FirstName, students.StudentId
	, rp.MajorCode as Major
	, students.Email as PrimaryEmail
	, reg.Email as SecondaryEmail
	, ceremonies.DateTime as CeremonyTime
	, dbo.udf_GetSpecialNeedsCSV(reg.id) as SpecialNeeds
	, TermCodes.Name as Term
	, Ceremonies.id
from Registrations reg
	inner join Students on students.Id = reg.Student_Id
	inner join RegistrationParticipations rp on rp.RegistrationId = reg.id
	inner join Ceremonies on rp.CeremonyId = Ceremonies.id
	inner join TermCodes on Ceremonies.TermCode = termcodes.id
where students.TermCode = @term
  and students.SJABlock = 0
  and rp.Cancelled = 0
  and rp.CeremonyId in ( select CeremonyId from CeremonyEditors 
									inner join Ceremonies on CeremonyEditors.CeremonyId = Ceremonies.id
						 where UserId = @userId
						   and Ceremonies.TermCode = @term
					    )
  and dbo.udf_GetSpecialNeedsCSV(reg.id) is not null					    
order by Ceremonies.DateTime, students.LastName

RETURN 0
GO
PRINT N'Creating [dbo].[usp_SummaryReport]...';


GO

CREATE PROCEDURE [dbo].[usp_SummaryReport]
	@term varchar(6),
	@userid int
AS

/*
	Provides a summary of all registrations
*/

select ceremonies.id, ceremonies.DateTime, ceremonies.TermCode
	, ceremonies.totaltickets totalceremonytickets
	, isnull(ceremonies.totalstreamingtickets, 0) TotalStreamingTickets
	, registrationtickets.tickets RegistrationTickets
	, isnull(pendingextratickets.tickets, 0) PendingExtraTickets
	, isnull(pendingextratickets.streamingtickets, 0) PendingStreamingExtraTickets
	, isnull(extratickets.tickets, 0) ApprovedExtraTickets
	, isnull(extratickets.streamingtickets, 0) ApprovedStreamingExtraTickets
from ceremonies
	left outer join (
		select sum(rp.numbertickets) tickets, rp.ceremonyid
		from registrationparticipations rp
			inner join registrations r on rp.registrationid = r.id
			inner join students s on r.student_id = s.id
		where rp.cancelled = 0
		  and s.sjablock = 0 and s.blocked = 0
		group by rp.ceremonyid
	) RegistrationTickets on RegistrationTickets.CeremonyId = ceremonies.id
	left outer join (
		select sum(etp.numbertickets) tickets, sum(etp.numberticketsstreaming) streamingtickets, ceremonyid
		from extraticketpetitions etp
			inner join registrationparticipations rp on rp.extraticketpetitionid = etp.id
		where etp.ispending = 0 and etp.isapproved = 1 and rp.cancelled = 0
		group by rp.ceremonyid
	) ExtraTickets on ExtraTickets.CeremonyId = ceremonies.id
	left outer join (
		select sum(isnull(etp.numbertickets, etp.numberticketsrequested)) tickets
			 , sum(isnull(etp.numberticketsstreaming, etp.numberticketsrequestedstreaming)) streamingtickets
			 , ceremonyid
		from extraticketpetitions etp
			inner join registrationparticipations rp on rp.extraticketpetitionid = etp.id
		where etp.ispending = 1 and rp.Cancelled = 0
		group by rp.ceremonyid
	) PendingExtraTickets on PendingExtraTickets.CeremonyId = ceremonies.id
where ceremonies.id in ( select CeremonyId from CeremonyEditors 
									inner join Ceremonies on CeremonyEditors.CeremonyId = Ceremonies.id
						 where UserId = @userId
						   and Ceremonies.TermCode = @term
					    )	

RETURN 0
GO
PRINT N'Creating [dbo].[usp_TicketSignOutSheet]...';


GO

CREATE PROCEDURE [dbo].[usp_TicketSignOutSheet]
	@term varchar(6),
	@userid int
AS
	
	/*
		List of students who have decided to pickup their tickets
	*/

	select students.LastName, students.FirstName, students.StudentId, rp.MajorCode Major
		, rp.NumberTickets RegistrationTickets
		, ISNULL(etp.NumberTickets, 0) ExtraTickets
		, ISNULL(etp.NumberTicketsStreaming, 0) ExtraStreamingTickets
	from RegistrationParticipations rp
		left outer join TicketDistributionMethods tdm on rp.TicketDistributionMethodId = tdm.id
		inner join Registrations reg on rp.RegistrationId = reg.id
		inner join Students on students.Id = reg.Student_Id
		left outer join ExtraTicketPetitions etp on etp.id = rp.ExtraTicketPetitionId and etp.IsPending = 1 and etp.IsApproved = 1
	where students.TermCode = @term
	  and tdm.Id = 'PU'
	  and students.SJABlock = 0
	  and rp.Cancelled = 0
	  and rp.CeremonyId in ( select CeremonyId from Ceremonies
								inner join ceremonyeditors on ceremonies.id = ceremonyeditors.CeremonyId
							 where UserId = @userid
							   and TermCode = @term)

RETURN 0
GO
PRINT N'Creating [dbo].[usp_TotalRegisteredByMajor]...';


GO

CREATE PROCEDURE [dbo].[usp_TotalRegisteredByMajor]
	@term varchar(6),
	@userid int,
	@major varchar(4)
AS

select s.lastname, s.firstname, s.studentid, rp.majorcode major
	, r.address1, r.address2, r.city, r.[state], r.zip, s.email as PrimaryEmail
	, r.email as SecondaryEmail, rp.numbertickets
	, etp.numbertickets as ExtraTickets, etp.numberticketsstreaming as ExtraStreamingTickets
	, case
		when etp.numbertickets is null then rp.numbertickets
		else etp.numbertickets + rp.numbertickets
		end as totaltickets
	, s.termcode as term
	, tdm.Name as DistributionMethod
	, rp.dateregistered
	, c.datetime as CeremonyTime
from registrationparticipations rp
	left outer join TicketDistributionMethods tdm on rp.TicketDistributionMethodId = tdm.id
	inner join registrations r on rp.registrationid = r.id
	inner join Students s on r.student_id = s.id
	left outer join extraticketpetitions etp on etp.id = rp.extraticketpetitionid and etp.ispending = 1 and etp.isapproved = 1
	inner join ceremonies c on c.id = rp.ceremonyid
where r.termcode = @term
  and rp.ceremonyid in (select ceremonyid from ceremonyeditors where userid = @userid)
  and s.sjablock = 0
  and rp.cancelled = 0
  and rp.majorcode = @major
order by s.lastname



RETURN 0
GO
PRINT N'Creating [dbo].[usp_TotalRegisteredStudents]...';


GO

CREATE PROCEDURE [dbo].[usp_TotalRegisteredStudents]
	@term varchar(6),
	@userid int
AS

select s.lastname, s.firstname, s.studentid, rp.majorcode major
	, r.address1, r.address2, r.city, r.[state], r.zip, s.email as PrimaryEmail
	, r.email as SecondaryEmail, rp.numbertickets
	, etp.numbertickets as ExtraTickets, etp.numberticketsstreaming as ExtraStreamingTickets
	, case
		when etp.numbertickets is null then rp.numbertickets
		else etp.numbertickets + rp.numbertickets
		end as totaltickets
	, s.termcode as term
	, tdm.Name as DistributionMethod
	, rp.dateregistered
	, c.datetime as CeremonyTime
from registrationparticipations rp
	left outer join TicketDistributionMethods tdm on rp.TicketDistributionMethodId = tdm.id
	inner join registrations r on rp.registrationid = r.id
	inner join Students s on r.student_id = s.id
	left outer join extraticketpetitions etp on etp.id = rp.extraticketpetitionid and etp.ispending = 1 and etp.isapproved = 1
	inner join ceremonies c on c.id = rp.ceremonyid
where r.termcode = @term
  and rp.ceremonyid in (select ceremonyid from ceremonyeditors where userid = @userid)
  and s.sjablock = 0
  and rp.cancelled = 0
order by s.lastname

RETURN 0
GO
PRINT N'Creating [dbo].[usp_TotalRegistrationPetitions]...';


GO

CREATE PROCEDURE [dbo].[usp_TotalRegistrationPetitions]
	@term varchar(6),
	@userid int
AS
	
select students.LastName, students.FirstName, students.StudentId, rp.MajorCode Major
	, Ceremonies.[DateTime] as CeremonyTime
	, rp.ExceptionReason
	, case when rp.IsPending = 1 then 'Pending' when rp.IsPending = 0 and rp.IsApproved = 1 then 'Approved'
		else 'Denied'
	  end as PetitionStatus
	, COUNT(case when rp.IsPending = 1 then rp.id end) as TotalPendingPetitions	
	, COUNT(case when rp.IsPending = 0 and rp.IsApproved = 1 then rp.id end) as TotalApprovedPetitions
	, COUNT(case when rp.IsPending = 0 and rp.IsApproved = 0 then rp.id end) as TotalDeniedPetitions
	, TermCodes.Name as Term
from RegistrationPetitions rp
	inner join Registrations reg on rp.RegistrationId = reg.id
	inner join Students on students.Id = reg.Student_Id
	inner join Ceremonies on Ceremonies.id = rp.CeremonyId
	inner join TermCodes on students.termcode = termcodes.id
where students.TermCode = @term
  and students.SJABlock = 0
  and rp.CeremonyId in ( select CeremonyId from Ceremonies
							inner join ceremonyeditors on ceremonies.id = ceremonyeditors.CeremonyId
						 where UserId = @userid
						   and TermCode = @term)						   
group by students.LastName, students.FirstName, students.StudentId, rp.MajorCode, Ceremonies.[DateTime]
	, rp.ExceptionReason, rp.IsPending, rp.IsApproved, TermCodes.Name
order by students.LastName

RETURN 0
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Audits] WITH CHECK CHECK CONSTRAINT [FK_Audits_ActionCodes1];

ALTER TABLE [dbo].[Ceremonies] WITH CHECK CHECK CONSTRAINT [FK_Commencements_TermCodes];

ALTER TABLE [dbo].[CeremonyColleges] WITH CHECK CHECK CONSTRAINT [FK_CeremonyColleges_Ceremonies];

ALTER TABLE [dbo].[CeremonyColleges] WITH CHECK CHECK CONSTRAINT [FK_CeremonyColleges_Colleges];

ALTER TABLE [dbo].[CeremonyEditors] WITH CHECK CHECK CONSTRAINT [FK_CommencementEditors_Commencements];

ALTER TABLE [dbo].[CeremonyMajors] WITH CHECK CHECK CONSTRAINT [FK_CeremonyMajors_Majors];

ALTER TABLE [dbo].[CeremonyMajors] WITH CHECK CHECK CONSTRAINT [FK_CommencementMajors_Commencements];

ALTER TABLE [dbo].[CeremonyXTicketDistributionMethods] WITH CHECK CHECK CONSTRAINT [FK_CeremonyXTicketDistributionMethods_Ceremonies];

ALTER TABLE [dbo].[CeremonyXTicketDistributionMethods] WITH CHECK CHECK CONSTRAINT [FK_CeremonyXTicketDistributionMethods_TicketDistributionMethods];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_ExtraTicketPetitions];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_RegistrationParticipations];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_RegistrationPetitions];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_Registrations];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_Students];

ALTER TABLE [dbo].[EmailQueue] WITH CHECK CHECK CONSTRAINT [FK_EmailQueue_Templates];

ALTER TABLE [dbo].[Majors] WITH CHECK CHECK CONSTRAINT [FK_Majors_Colleges];

ALTER TABLE [dbo].[Majors] WITH CHECK CHECK CONSTRAINT [FK_Majors_Majors];

ALTER TABLE [dbo].[RegistrationParticipations] WITH CHECK CHECK CONSTRAINT [FK_RegistrationParticipations_Ceremonies];

ALTER TABLE [dbo].[RegistrationParticipations] WITH CHECK CHECK CONSTRAINT [FK_RegistrationParticipations_ExtraTicketPetitions];

ALTER TABLE [dbo].[RegistrationParticipations] WITH CHECK CHECK CONSTRAINT [FK_RegistrationParticipations_Registrations];

ALTER TABLE [dbo].[RegistrationPetitions] WITH CHECK CHECK CONSTRAINT [FK_RegistrationPetitions_Ceremonies];

ALTER TABLE [dbo].[RegistrationPetitions] WITH CHECK CHECK CONSTRAINT [FK_RegistrationPetitions_RegistrationPetitions];

ALTER TABLE [dbo].[RegistrationPetitions] WITH CHECK CHECK CONSTRAINT [FK_RegistrationPetitions_TicketDistributionMethods];

ALTER TABLE [dbo].[Registrations] WITH CHECK CHECK CONSTRAINT [FK_Registrations_Registrations];

ALTER TABLE [dbo].[Registrations] WITH CHECK CHECK CONSTRAINT [FK_Registrations_States];

ALTER TABLE [dbo].[Registrations] WITH CHECK CHECK CONSTRAINT [FK_Registrations_Students];

ALTER TABLE [dbo].[Registrations] WITH CHECK CHECK CONSTRAINT [FK_Registrations_TermCodes];

ALTER TABLE [dbo].[RegistrationSpecialNeeds] WITH CHECK CHECK CONSTRAINT [FK_RegistrationSpecialNeeds_Registrations];

ALTER TABLE [dbo].[RegistrationSpecialNeeds] WITH CHECK CHECK CONSTRAINT [FK_RegistrationSpecialNeeds_SpecialNeeds];

ALTER TABLE [dbo].[StudentMajors] WITH CHECK CHECK CONSTRAINT [FK_StudentMajors_Majors];

ALTER TABLE [dbo].[StudentMajors] WITH CHECK CHECK CONSTRAINT [FK_StudentMajors_Students];

ALTER TABLE [dbo].[Students] WITH CHECK CHECK CONSTRAINT [FK_Students_Ceremonies];

ALTER TABLE [dbo].[Templates] WITH CHECK CHECK CONSTRAINT [FK_Templates_Ceremonies];

ALTER TABLE [dbo].[Templates] WITH CHECK CHECK CONSTRAINT [FK_Templates_TemplateTypes];

ALTER TABLE [dbo].[TemplateTokens] WITH CHECK CHECK CONSTRAINT [FK_TemplateTokens_TemplateTypes];


GO
PRINT N'Update complete.'
GO
